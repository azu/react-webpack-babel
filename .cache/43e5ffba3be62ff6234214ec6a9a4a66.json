{"dependencies":[{"name":"react","loc":{"line":11,"column":20}},{"name":"prop-types","loc":{"line":12,"column":24}},{"name":"react-deep-force-update","loc":{"line":13,"column":30}}],"generated":{"js":"'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar deepForceUpdate = require('react-deep-force-update');\n\nvar Component = React.Component;\n\nvar AppContainer = function (_Component) {\n  _inherits(AppContainer, _Component);\n\n  function AppContainer(props) {\n    _classCallCheck(this, AppContainer);\n\n    var _this = _possibleConstructorReturn(this, (AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call(this, props));\n\n    if (props.warnings === false && typeof __REACT_HOT_LOADER__ !== 'undefined') {\n      __REACT_HOT_LOADER__.warnings = props.warnings;\n    }\n\n    _this.state = { error: null };\n    return _this;\n  }\n\n  _createClass(AppContainer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n        console.error('React Hot Loader: It appears that \"react-hot-loader/patch\" ' + 'did not run immediately before the app started. Make sure that it ' + 'runs before any other code. For example, if you use Webpack, ' + 'you can add \"react-hot-loader/patch\" as the very first item to the ' + '\"entry\" array in its config. Alternatively, you can add ' + 'require(\"react-hot-loader/patch\") as the very first line ' + 'in the application code, before any other imports.');\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps() {\n      // Hot reload is happening.\n      // Retry rendering!\n      this.setState({\n        error: null\n      });\n      // Force-update the whole tree, including\n      // components that refuse to update.\n      deepForceUpdate(this);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(prevProps, prevState) {\n      // Don't update the component if the state had an error and still has one.\n      // This allows to break an infinite loop of error -> render -> error -> render\n      // https://github.com/gaearon/react-hot-loader/issues/696\n      if (prevState.error && this.state.error) {\n        return false;\n      }\n\n      return true;\n    }\n\n    // This hook is going to become official in React 15.x.\n    // In 15.0, it only catches errors on initial mount.\n    // Later it will work for updates as well:\n    // https://github.com/facebook/react/pull/6020\n    /* eslint-disable camelcase */\n\n  }, {\n    key: 'unstable_handleError',\n    value: function unstable_handleError(error) {\n      this.componentDidCatch(error);\n    }\n    /* eslint-enable camelcase */\n\n  }, {\n    key: 'componentDidCatch',\n    value: function componentDidCatch(error) {\n      this.setState({\n        error: error\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var error = this.state.error;\n\n\n      if (this.props.errorReporter && error) {\n        console.error(error);\n        return React.createElement(this.props.errorReporter, { error: error });\n      } else if (error) {\n        console.error(error);\n      }\n\n      return React.Children.only(this.props.children);\n    }\n  }]);\n\n  return AppContainer;\n}(Component);\n\nAppContainer.propTypes = {\n  children: function children(props) {\n    if (React.Children.count(props.children) !== 1) {\n      return new Error('Invalid prop \"children\" supplied to AppContainer. ' + 'Expected a single React element with your appâ€™s root component, e.g. <App />.');\n    }\n\n    return undefined;\n  },\n\n  errorReporter: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  warnings: PropTypes.bool\n};\n\nmodule.exports = AppContainer;"},"hash":"a4e8c147144524b70897370914b2f5fa"}